Let’s assume we have an input array: [7, 3, 9, 1, 5, 4, 8, 2].
Step 1: Pair the Elements

Divide the array into pairs of adjacent elements. If the array has an odd number of elements, the last element is left unpaired.
For each pair, compare the two elements and ensure the smaller element is on the left and the larger on the right.

Example:

Input: [7, 3, 9, 1, 5, 4, 8, 2]
Pairs: (7, 3), (9, 1), (5, 4), (8, 2)
Sort each pair:

(7, 3) → (3, 7) (swap because 3 < 7)
(9, 1) → (1, 9) (swap because 1 < 9)
(5, 4) → (4, 5) (swap because 4 < 5)
(8, 2) → (2, 8) (swap because 2 < 8)


Resulting pairs: [(3, 7), (1, 9), (4, 5), (2, 8)]

Step 2: Sort Pairs by Larger Elements

Treat the larger element of each pair as the representative of the pair.
Sort the pairs based on their larger elements (the second element in each pair) in ascending order.

Example:

Larger elements: [7, 9, 5, 8] (from pairs [(3, 7), (1, 9), (4, 5), (2, 8)])
Sort these larger elements: [5, 7, 8, 9]
Reorder the pairs based on the sorted larger elements:

5 corresponds to pair (4, 5)
7 corresponds to pair (3, 7)
8 corresponds to pair (2, 8)
9 corresponds to pair (1, 9)


Sorted pairs: [(4, 5), (3, 7), (2, 8), (1, 9)]

Step 3: Create the Main Chain

Extract the larger elements from the sorted pairs to form the "main chain," which is already sorted.
Main chain: [5, 7, 8, 9]

Step 4: Insert Smaller Elements Using Binary Search

Now, insert the smaller elements from each pair into the main chain.
To minimize comparisons, the algorithm inserts elements in a specific order, often following a pattern inspired by the Jacobsthal numbers or a similar sequence to optimize the insertion process.
For each smaller element, use binary search to find its correct position in the main chain and insert it.

Insertion Order:

The smaller elements are [4, 3, 2, 1] (from pairs [(4, 5), (3, 7), (2, 8), (1, 9)]).
The Ford-Johnson algorithm typically inserts elements in a way that leverages the partial ordering. A common approach is to insert the smaller elements in reverse order of their pair’s larger elements (i.e., start with the smaller element from the pair with the largest larger element).

Example:

Start with the main chain: [5, 7, 8, 9]
Smaller elements to insert: [1, 2, 3, 4] (we’ll insert in an optimized order, e.g., [1, 2, 3, 4]).

Insert 1 (from pair (1, 9)):

Use binary search to find where 1 belongs in [5, 7, 8, 9].
Binary search:

Compare 1 with the middle element (e.g., 7): 1 < 7, so check the left half [5].
Compare 1 with 5: 1 < 5, so 1 goes before 5.


Insert 1: [1, 5, 7, 8, 9]

Insert 2 (from pair (2, 8)):

Binary search in [1, 5, 7, 8, 9]:

Compare 2 with middle element 7: 2 < 7, check left half [1, 5].
Compare 2 with 1: 2 > 1, check right of 1.
Compare 2 with 5: 2 < 5, so 2 goes between 1 and 5.


Insert 2: [1, 2, 5, 7, 8, 9]

Insert 3 (from pair (3, 7)):

Binary search in [1, 2, 5, 7, 8, 9]:

Compare 3 with middle element 5: 3 < 5, check left half [1, 2].
Compare 3 with 2: 3 > 2, so 3 goes after 2.


Insert 3: [1, 2, 3, 5, 7, 8, 9]

Insert 4 (from pair (4, 5)):

Binary search in [1, 2, 3, 5, 7, 8, 9]:

Compare 4 with middle element 5: 4 < 5, check left half [1, 2, 3].
Compare 4 with 2: 4 > 2, check right of 2.
Compare 4 with 3: 4 > 3, so 4 goes after 3.


Insert 4: [1, 2, 3, 4, 5, 7, 8, 9]

Step 5: Handle Odd-Sized Input (if applicable)

If the input array has an odd number of elements, the last element is unpaired and needs to be inserted into the final sorted array using binary search.
In our example, the input size is 8 (even), so this step is skipped. If there were an extra element (e.g., 6), we would use binary search to insert 6 into [1, 2, 3, 4, 5, 7, 8, 9].

Final Sorted Array

After inserting all smaller elements, the array is fully sorted: [1, 2, 3, 4, 5, 7, 8, 9].


Key Features of the Algorithm

Pairwise Sorting:

Sorting pairs initially ensures that the smaller element of each pair is less than or equal to the larger element, reducing the number of comparisons needed later.


Binary Search for Insertion:

Using binary search to insert smaller elements minimizes comparisons. Each insertion requires $ \log k $ comparisons, where $ k $ is the size of the current main chain.


Optimized Insertion Order:

The algorithm often uses a specific order for inserting smaller elements (e.g., based on Jacobsthal numbers) to minimize the number of comparisons by ensuring that earlier insertions don’t disrupt later ones excessively.


Comparison Efficiency:

The Ford-Johnson algorithm is designed to approach the theoretical minimum number of comparisons for sorting, which is approximately $ n \log n - 1.44n $ comparisons for $ n $ elements (close to the information-theoretic lower bound).




Complexity Analysis

Time Complexity:

Pairing and sorting pairs: $ O(n) $ (since each pair requires one comparison).
Sorting larger elements: $ O(n \log n) $ in the worst case, but typically $ O(k \log k) $ where $ k = n/2 $.
Inserting smaller elements: Each insertion uses binary search, costing $ O(\log k) $, and there are $ n/2 $ insertions, so total is $ O(n \log n) $.
Overall: $ O(n \log n) $.


Space Complexity:

$ O(n) $ for storing the pairs and the main chain.


Comparisons:

The algorithm minimizes comparisons, often achieving close to the optimal $ n \log n - O(n) $.