# PmergeMe Program Process Documentation

## Program Entry and Main Flow

### 1. main.cpp - Program Entry Point
```
main(argc, argv)
├── Creates PmergeMe sorter object
├── Calls sorter.processAndSort(argc, argv)
└── Returns 0
```

### 2. PmergeMe::processAndSort() - Main Processing Function
```
processAndSort(argc, argv)
├── parseArguments(argc, argv) - Parse and validate input
├── printContainer(_vectorContainer, "Before: ") - Show input
├── 
├── Vector Processing:
│   ├── _comps = 0 - Reset comparison counter
│   ├── gettimeofday(&start, NULL) - Start timing
│   ├── fordJohnsonSortVect(_vectorContainer) - Sort vector
│   ├── Print "Total vector comparisons: " + _comps
│   ├── gettimeofday(&end, NULL) - End timing
│   └── Calculate vectorTime = getTimeInMs(start, end)
├──
├── Deque Processing:
│   ├── _comps = 0 - Reset comparison counter
│   ├── gettimeofday(&start, NULL) - Start timing
│   ├── fordJohnsonSortDeque(_dequeContainer) - Sort deque
│   ├── Print "Total deque comparisons: " + _comps
│   ├── gettimeofday(&end, NULL) - End timing
│   └── Calculate dequeTime = getTimeInMs(start, end)
├──
├── Output Results:
│   ├── printContainer(_vectorContainer, "After: ") - Show sorted result
│   ├── Print timing information for both containers
│   ├── Verify sorting with isSorted() for both containers
│   └── Print success messages
└── Catch and handle any exceptions
```

## Input Parsing and Validation

### 3. PmergeMe::parseArguments() - Input Validation
```
parseArguments(argc, argv)
├── Check argc > 1 (at least one argument)
├── For each argument argv[i]:
│   ├── isValidInteger(argv[i]) - Validate format
│   ├── Convert to integer with strtol()
│   ├── Check range (must be positive)
│   ├── Add to both _vectorContainer and _dequeContainer
├── Throw std::invalid_argument if validation fails
└── Populate both containers with same data
```

### 4. PmergeMe::isValidInteger() - String Validation
```
isValidInteger(str)
├── Check if string is empty - return false
├── Check for leading '+' sign - skip if present
├── For each character:
│   ├── Check if digit - continue if yes
│   └── Return false if non-digit found
├── Check for overflow with strtol()
├── Ensure result is positive integer
└── Return true if all checks pass
```

## Ford-Johnson Algorithm Implementation

### 5. PmergeMe::fordJohnsonSortVect() - Vector Sorting
```
fordJohnsonSortVect(container)
├── Check size <= 1 - return if trivial
├── 
├── Step 1: Create Initial Groups
│   ├── createGroupsHelper(container, groups, ungrouped)
│   │   ├── Creates pairs from consecutive elements
│   │   ├── Sorts each pair (smaller, larger)
│   │   ├── Stores unpaired element if odd size
│   │   └── Returns groups and ungrouped elements
├──
├── Step 2: Recursive Group Sorting
│   ├── recursiveGroupSort(groups)
│   │   ├── Extracts larger elements from each group
│   │   ├── Recursively sorts larger elements using Ford-Johnson
│   │   ├── Reconstructs groups in sorted order
│   │   └── Handles comparison counting
├──
├── Step 3: Build Main Chain
│   ├── buildMainChain(groups, mainChain, smallerElements)
│   │   ├── Adds smaller element from first group to mainChain
│   │   ├── Adds all larger elements (already sorted) to mainChain
│   │   ├── Collects remaining smaller elements for insertion
│   │   └── mainChain becomes initial sorted sequence
├──
├── Step 4: Jacobsthal Insertion
│   ├── insertElementsWithJacobsthalVec(mainChain, smallerElements)
│   │   ├── generateJacobsthalSequence(smallerElements.size())
│   │   ├── Process elements in Jacobsthal order
│   │   ├── For each element: binarySearchInsert()
│   │   └── Maintains sorted order with minimal comparisons
├──
├── Step 5: Handle Unpaired Elements
│   ├── For each ungrouped element:
│   │   └── insertUnpairedElement(mainChain, element)
│   │       └── Uses binarySearchInsert() for placement
├──
└── container = mainChain - Replace original with sorted result
```

### 6. PmergeMe::fordJohnsonSortDeque() - Deque Sorting
```
fordJohnsonSortDeque(container)
├── Identical structure to fordJohnsonSortVect()
├── Uses deque-specific template instantiations
├── Same algorithm steps 1-5
└── Demonstrates container-agnostic implementation
```

## Template Functions (Core Algorithm Components)

### 7. PmergeMe::createGroupsHelper() - Initial Pairing
```
createGroupsHelper(input, groups, ungrouped)
├── groups.clear(), ungrouped.clear()
├── For i = 0; i + 1 < input.size(); i += 2:
│   ├── Create pair (input[i], input[i+1])
│   ├── Sort pair: if (first > second) swap()
│   ├── _comps++ - Count comparison
│   └── groups.push_back(pair)
├── If input.size() is odd:
│   └── ungrouped.push_back(input.back())
└── Result: groups contains sorted pairs, ungrouped has remainder
```

### 8. PmergeMe::recursiveGroupSort() - Progressive Grouping
```
recursiveGroupSort(groups)
├── Check groups.size() <= 1 - return if trivial
├── Extract larger elements:
│   └── For each group: largerElements.push_back(group[0])
├── Create temporary PmergeMe object
├── tempSorter.fordJohnsonSort(largerElements) - Recursive call
├── _comps += tempSorter._comps - Accumulate comparisons
├── Reconstruct groups in sorted order:
│   ├── Map each sorted larger element back to its group
│   ├── Build newGroups with sorted order
│   └── groups = newGroups
└── Result: groups sorted by their larger elements
```

### 9. PmergeMe::buildMainChain() - Chain Construction
```
buildMainChain(groups, mainChain, smallerElements)
├── mainChain.clear(), smallerElements.clear()
├── Check groups.empty() - return if empty
├── Add smaller element from first group:
│   └── mainChain.push_back(groups[0][1])
├── Add all larger elements (sorted):
│   └── For each group: mainChain.push_back(group[0])
├── Collect remaining smaller elements:
│   └── For groups[1] to end: smallerElements.push_back(group[1])
└── Result: mainChain = [first_smaller, all_larger], smallerElements for insertion
```

### 10. PmergeMe::generateJacobsthalSequence() - Optimization Sequence
```
generateJacobsthalSequence(n)
├── seq.clear()
├── Handle base cases: n=0 returns [0], n=1 returns [1]
├── Initialize: seq = [1, 3]
├── Generate sequence: next = prev1 + 2 * prev2
├── Check overflow protection:
│   ├── Verify 2 * prev2 won't overflow
│   ├── Verify prev1 + 2 * prev2 won't overflow
│   └── Break if overflow detected
├── Continue until next > n
└── Return: [1, 3, 5, 11, 21, 43, 85, ...]
```

### 11. PmergeMe::insertElementsWithJacobsthalVec() - Optimal Insertion
```
insertElementsWithJacobsthalVec(mainChain, smallerElements)
├── Check smallerElements.empty() - return if empty
├── Generate Jacobsthal sequence for optimization
├── Create insertion tracking: vector<bool> inserted(size, false)
├── For each Jacobsthal index:
│   ├── Convert to 0-based index
│   ├── Check bounds and not already inserted
│   ├── pos = binarySearchInsert(mainChain, element, mainChain.size())
│   ├── mainChain.insert(mainChain.begin() + pos, element)
│   └── Mark as inserted[index] = true
├── Insert remaining elements not covered by Jacobsthal sequence
└── Result: All smaller elements inserted in optimal order
```

### 12. PmergeMe::binarySearchInsert() - Insertion Position Finding
```
binarySearchInsert(mainChain, value, maxPos)
├── Initialize: left = 0, right = min(maxPos, mainChain.size())
├── Handle base cases:
│   ├── right == 0: return 0
│   ├── right == 1: _comps++, return 0 or 1 based on comparison
├── Binary search loop while (left < right):
│   ├── mid = left + (right - left) / 2
│   ├── _comps++ - Count comparison
│   ├── If mainChain[mid] < value: left = mid + 1
│   ├── Else: right = mid
│   └── Continue until left == right
└── Return left (insertion position)
```

### 13. PmergeMe::insertUnpairedElement() - Handle Odd Elements
```
insertUnpairedElement(mainChain, element)
├── pos = binarySearchInsert(mainChain, element, mainChain.size())
├── mainChain.insert(mainChain.begin() + pos, element)
└── Inserts single unpaired element at correct position
```

## Utility Functions

### 14. PmergeMe::isSorted() - Verification
```
isSorted(container)
├── For i = 1; i < container.size(); i++:
│   ├── If container[i-1] > container[i]: return false
├── Return true if all elements in order
└── Used for final verification
```

### 15. PmergeMe::getTimeInMs() - Timing
```
getTimeInMs(start, end)
├── Calculate seconds difference: end.tv_sec - start.tv_sec
├── Calculate microseconds difference: end.tv_usec - start.tv_usec
├── Convert to total microseconds
└── Return as double for precise timing
```

### 16. PmergeMe::printContainer() - Output
```
printContainer(container, prefix)
├── Print prefix string
├── For each element: std::cout << element << " "
└── std::cout << std::endl
```

## Algorithm Complexity and Behavior

### Comparison Counting
- Each comparison increments `_comps`
- Tracked across recursive calls
- Reported separately for vector and deque

### Memory Management
- Uses template functions for container-agnostic operations
- Creates temporary objects for recursion
- Cleans up automatically via RAII

### Error Handling
- Input validation throws std::invalid_argument
- Exception handling in processAndSort()
- Graceful error messages to stderr

### Time Complexity
- Overall: O(n log n)
- Pairing: O(n)
- Recursive sorting: O(n log n)
- Jacobsthal insertion: O(n log n)
- Binary searches: O(log n) per insertion

### Space Complexity
- Main containers: O(n)
- Recursive call stack: O(log n)
- Temporary groups and chains: O(n)
- Overall: O(n)

## Program Flow Summary

1. **Entry**: main() creates PmergeMe object
2. **Parse**: Validate and parse command line arguments
3. **Display**: Show input sequence
4. **Sort Vector**: Apply Ford-Johnson algorithm to std::vector
5. **Sort Deque**: Apply Ford-Johnson algorithm to std::deque
6. **Display**: Show sorted output and performance metrics
7. **Verify**: Confirm both containers are properly sorted
8. **Exit**: Return 0 on success

The Ford-Johnson algorithm minimizes comparisons through:
- Optimal pairing and progressive grouping
- Jacobsthal sequence for insertion order
- Binary search for element placement
- Recursive structure for larger element sorting